from logging import Logger
from threading import Lock
from typing import Dict, List, Optional, Text

from requests import Session
from six.moves import queue

from reportportal_client.core.rp_requests import (
    RPRequestLog as RPRequestLog
)
from reportportal_client.core.worker import APIWorker as APIWorker

logger: Logger

MAX_LOG_BATCH_PAYLOAD_SIZE: int


class LogManager:
    _lock: Lock = ...
    _log_endpoint: Text = ...
    _logs_batch: List = ...
    _worker: Optional[APIWorker] = ...
    api_version: Text = ...
    queue: queue.PriorityQueue = ...
    launch_id: Text = ...
    log_batch_size: int = ...
    project_name: Text = ...
    rp_url: Text = ...
    session: Session = ...
    verify_ssl: bool = ...
    log_batch_payload_size: int = ...

    def __init__(self,
                 rp_url: Text,
                 session: Session,
                 api_version: Text,
                 launch_id: Text,
                 project_name: Text,
                 log_batch_size: int = ...,
                 verify_ssl: bool = ...,
                 log_batch_payload_size: int = ...) -> None: ...

    def _log_process(self, log_req: RPRequestLog) -> None: ...

    def _send_batch(self) -> None: ...

    def log(self,
            time: Text,
            message: Optional[Text] = ...,
            level: Optional[Text] = ...,
            attachment: Optional[Dict] = ...,
            item_id: Optional[Text] = ...) -> None: ...

    def start(self) -> None: ...

    def stop(self) -> None: ...

    def stop_force(self) -> None: ...
