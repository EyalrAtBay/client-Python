import threading

from aenum import Enum
from logging import Logger
from threading import Thread
from queue import Queue
from reportportal_client.core.rp_requests import RPRequestBase as RPRequest
from typing import Any, Optional, Text, Union

from static.defines import Priority

logger: Logger
THREAD_TIMEOUT: int

class ControlCommand(Enum):
    CLEAR_QUEUE: Any = ...
    NOP: Any = ...
    REPORT_STATUS: Any = ...
    STOP: Any = ...
    STOP_IMMEDIATE: Any = ...
    def is_stop_cmd(self) -> bool: ...
    def __lt__(self, other: Union[ControlCommand, RPRequest]) -> bool: ...
    @property
    def priority(self) -> Priority: ...

class APIWorker:
    _queue: Queue = ...
    _thread: Optional[Thread] = ...
    _stop_lock: threading.Condition = ...
    name: Text = ...
    def __init__(self, task_queue: Queue) -> None: ...
    def _command_get(self) -> Optional[ControlCommand]: ...
    def _command_process(self, cmd: Optional[ControlCommand]) -> None: ...
    def _monitor(self) -> None: ...
    def _request_process(self, request: Optional[RPRequest]) -> None: ...
    def _stop(self) -> None: ...
    def _stop_immediately(self) -> None: ...
    def is_alive(self) -> bool: ...
    def send(self, cmd: Union[ControlCommand, RPRequest]) -> Any: ...
    def start(self) -> None: ...
    def __perform_stop(self, stop_command: ControlCommand) -> None: ...
    def stop(self) -> None: ...
    def stop_immediate(self) -> None: ...
